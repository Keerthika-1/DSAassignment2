March 28 Assignments
1  WAP for searching a number using binary search. Return the index of the num if exists else return 

package search.java;
public class binarySearch {
public static void main(String[] args) {
int []a = {1,2,3,34,56,66,78,89};
int key=144;
int Search=binarySearch(a,key);
    System.out.println(Search);  

	}

	private static int binarySearch(int[] a, int key) {

		int start=0;
		int end=a.length-1;
		while(start<=end) {
			int mid=(start+end)/2;

			 if(a[mid]>key ) {
			 end= mid-1;
				}
			 else if(a[mid]==key) {
					return mid;

				}
			else {
			start= mid+1;
			}

		}

	return -1;
	}
}
-------- ---------------------------------------------------------------
2 Find the cube root of a number using binary search
package search.java;

public class cubeRoot {

	public static void main(String[] args) {
		int num=100;
		int cubeRoot=FindCubeRoot(num);
		System.out.println(Math.cbrt(num));


	}

	private static int FindCubeRoot(int num) {
		int start=0;
		int end =num;
		int ans;
		while(start<num) {
			int mid=(start+end)/2;
			int cube=mid*mid*mid;
			if(cube==num) {
				return mid;

		 }

			else if(cube<num) {
				end=mid-1;
			ans=mid;
			}

			else{
				start=mid+1;

			}
			}
		return 1;
	}

}
---------------------------------------------------------------------------
3. Find the intersection elements of two sorted arrays
A[] = { 3,6,8}   B[] ={1,2,3,5,6,90,789}
Output = 3,6"
package search.java;

public class intersection {
	public static void main(String[]args) {
	int[]a = {3,6,8}  ;
	int[] b={1,2,3,5,6,90,789};
		for(int i=0;i<a.length;i++) {
			for(int j=0;j<b.length;j++) {
				if(a[i]==b[j]) {
					System.out.println(a[i]);
					}
				}
			}
		}
	}
-----	--------------------------------------------------------
march29 assignment

"1. Find the smallest missing element from a sorted array 
public class MyClass {
    public static void main(String[] args) {
		// TODO Auto-generated method stub


		int a[] = {0,1,3,4,8,9,10,11,13};

		int missingNum = findMissingNum(a);
		System.out.println(missingNum);

		}

	private static int findMissingNum(int[] a) {

		int start = 0;
		int end = a.length-1;

		while(start<=end)
		{
			int mid = start + (end-start)/2;

			if(mid == 0)
			{
				return mid;
			}


			if(a[mid]!=mid && a[mid-1]==mid-1)
			{
				return mid;
			}
				else if(a[mid]==mid)
			{
				start = mid +1;
			}


			else
			{
				end = mid -1;
			}
		}
		return a.length;
	}


}

---------------------------------------------------------------------------------------------------------------------
2 Find the missing term in a sequence in logarithmic time"
public class Main
{

    public static int findMissingTerm(int[] nums)
    {

        int left = 0, right = nums.length - 1;


        int diff = (nums[nums.length - 1] - nums[0]) / nums.length;

        while (left <= right)
        {

            int mid = right - (right - left) / 2;


            if (mid + 1 < nums.length && nums[mid + 1] - nums[mid] != diff) {
                return nums[mid + 1] - diff;
            }


            if (mid - 1 >= 0 && nums[mid] - nums[mid - 1] != diff) {
                return nums[mid - 1] + diff;
            }


            if (nums[mid] - nums[0] != (mid - 0) * diff) {
                right = mid - 1;
            }
            else {
                left = mid + 1;
            }
        }
        return -1;
    }

    public static void main(String[] args)
    {
  int[] nums = { 5, 7, 9, 11, 15 };

        System.out.println("The missing term is " + findMissingTerm(nums));
    }
}
----------------------------------------------------------------------------------------------------------------------
march 30 Assignments
1. Finding Missing Number in an array binary search
public class MyClass {
    public static void main(String[] args) {
		// TODO Auto-generated method stub


		int a[] = {0,1,3,4,8,9,10,11,13};

		int missingNum = findMissingNum(a);
		System.out.println(missingNum);

		}

	private static int findMissingNum(int[] a) {

		int start = 0;
		int end = a.length-1;

		while(start<=end)
		{
			int mid = start + (end-start)/2;

			if(mid == 0)
			{
				return mid;
			}


			if(a[mid]!=mid && a[mid-1]==mid-1)
			{
				return mid;
			}
				else if(a[mid]==mid)
			{
				start = mid +1;
			}


			else
			{
				end = mid -1;
			}
		}
		return a.length;
	}
  
  
  ________________________________________________________________________________________________________________________
  march31 assignments
1 https://www.techiedelight.com/find-floor-ceil-number-sorted-array/"input-array-is-sorted/"
public class Main
{
    
    public static int getCeil(int[] nums, int x)
    {
        
        int left = 0, right = nums.length - 1;
 

        int ceil = -1;
 
        
        while (left <= right)
        {
    
            int mid = (left + right) / 2;
 
            
            if (nums[mid] == x) {
                return nums[mid];
            }
 
    
            else if (x < nums[mid])
            {
                ceil = nums[mid];
                right = mid - 1;
            }
           else {
                left = mid + 1;
            }
        }
 
        return ceil;
    }
 
    public static int getFloor(int[] nums, int x)
    {
        int left = 0, right = nums.length - 1;
 
    
        int floor = -1;
 
    
        while (left <= right)
        {
            
            int mid = (left + right) / 2;
 

            if (nums[mid] == x) {
                return nums[mid];
            }
 
        
            else if (x < nums[mid]) {
                right = mid - 1;
            }

            else {
                floor = nums[mid];
                left = mid + 1;
            }
        }
 return floor;
    }
 
    public static void main(String[] args)
    {
        int[] nums = { 1, 4, 6, 8, 9 };
 
        for (int i = 0; i <= 10; i++) {
            System.out.println("Number " + i + " â€”> ceil is " + getCeil(nums, i)
                    + ", floor is " + getFloor(nums, i));
        }
    }
}
-----------------------------------------------------------------------------------------------------------------------

2 https://www.techiedelight.com/find-number-1s-sorted-binary-array/

public class{
    
    public static int getCeil(int[] nums, int x)
    {
    
        int left = 0, right = nums.length - 1;
 
        int ceil = -1;
 
        
        while (left <= right)
        {
            int mid = (left + right) / 2;
 
            if (nums[mid] == x) {
                return nums[mid];
            }
 

            else if (x < nums[mid])
            {
                ceil = nums[mid];
                right = mid - 1;
            }
 
        
            else {
                left = mid + 1;
            }
        }
 
        return ceil;
    }
 
    -----------------------------------------------------------------------------------------
    April 4 Assignment
1 Write a program to sort an array using insertion sort
public class InsertionSortExample {  
    public static void insertionSort(int array[]) {  
        int n = array.length;  
        for (int j = 1; j < n; j++) {  
            int key = array[j];  
            int i = j-1;  
            while ( (i > -1) && ( array [i] > key ) ) {  
                array [i+1] = array [i];  
                i--;  
            }  
            array[i+1] = key;  
        }  
    }  
       
    public static void main(String a[]){    
        int[] arr1 = {9,14,3,2,43,11,58,22};    
        System.out.println("Before Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
        System.out.println();    
            
        insertionSort(arr1);//sorting array using insertion sort    
           
        System.out.println("After Insertion Sort");    
        for(int i:arr1){    
            System.out.print(i+" ");    
        }    
    }    
}    
------------------------------------------------------------------------------------------------------------------
2 Add elements in arraylist and change the 3rd index element
public class ArrayListExample 
{
    public static void main(String[] args) 
    {
        ArrayList<String> namesList = new ArrayList<String>(Arrays.asList( "alex", "brian", "charles") );
         
        System.out.println(namesList);  //list size is 3
         
        //Add element at 0 index
        namesList.add(0, "Lokesh");
         
        System.out.println(namesList);  //list size is 4
    }
}
---------------------------------------------------------------------------------------------------------------------
3  Coply all elements from one list to another
public class CopyArray {    
    public static void main(String[] args) {          
        int [] arr1 = new int [] {1, 2, 3, 4, 5};     
        int arr2[] = new int[arr1.length];    
        for (int i = 0; i < arr1.length; i++) {     
            arr2[i] = arr1[i];     
        }      
        System.out.println("Elements of original array: ");    
        for (int i = 0; i < arr1.length; i++) {     
           System.out.print(arr1[i] + " ");    
        }     
              System.out.println();    
        System.out.println("Elements of new array: ");    
        for (int i = 0; i < arr2.length; i++) {     
           System.out.print(arr2[i] + " ");    
        }     
    }    
}    
-------------------------------------------------------------------------------------------------------------------
4 Sort arraylist in descending order
import java.util.*;
public class Details  {

	public static void main(String args[]){
	   ArrayList<String> arraylist = new ArrayList<String>();
	   arraylist.add("AA");
	   arraylist.add("ZZ");
	   arraylist.add("CC");
	   arraylist.add("FF");
	   System.out.println("Before Sorting:");
	   for(String str: arraylist){
			System.out.println(str);
		}
	   Collections.sort(arraylist, Collections.reverseOrder());
	   System.out.println("ArrayList in descending order:");
	   for(String str: arraylist){
			System.out.println(str);
		}
	}
}
--------------------------------------------------------------------------------------------------------------

April 5 assignment
1. Segregate the prime numbers and non- prime numbers in an array 
import java.io.*;
import java.lang.*;
import java.util.*;
 
public class segregate {
  public  static boolean isPrime(int n)
    {
        if (n <= 1)
            return false;
 
        if (n <= 3)
            return true;
        if (n % 2 == 0 || n % 3 == 0)
            return false;
        for (int i = 5; i * i <= n; i = i + 6) {
            if (n % i == 0 || n % (i + 2) == 0)
                return false;
        }
 
    
        return true;
    }
    static void segregatePrimeNonPrime(int arr[], int N)
    {
        int left = 0, right = N - 1;
        while (left < right) {
 
         
            while (isPrime(arr[left]))
                left--;
            while (!isPrime(arr[right]))
                right--;
            if (left < right) {
                int temp = arr[right];
                arr[right] = arr[left];
                arr[left] = temp;
 
                left++;
                right--;
            }
        }
        for (int i = 0; i < N; i++)
            System.out.print(arr[i] + " ");
    }
 public static void main(String[] args)
  {
   int arr[] = { 2, 3, 4, 6, 7, 8, 9, 10 };
        int N = arr.length;
 segregatePrimeNonPrime(arr, N);
    }
}
----------------------------------------------------------------------------------------------------------
  2. move zeros to end in linear TC and single pass.
     import java.io.*;
  
public class linear {
  public static void moveZerosToEnd(int arr[], int n) {
    int count = 0;
    for (int i = 0; i < n; i++)
        if (arr[i] != 0)
            arr[count++] = arr[i];
    for (int i = count; i<n;i++)
        arr[i]=0;
}
static void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
    System.out.print(arr[i] + " ");
}
public static void main(String args[]) {
    int arr[] = {0, 1, 9, 8, 4, 0, 0, 2,
                         7, 0, 6, 0, 9};
    int n = arr.length;
  
    System.out.print("Original array: ");
    printArray(arr, n);
  
    moveZerosToEnd(arr, n);
  
    System.out.print("\nModified array: ");
    printArray(arr, n);
}
}
-------------------------------------------------------------------------------------------------------------------
3. Sort 0s 1s 2s in linear TC
import java.io.*;
  public class countzot 
{
   public  static void sort012(int a[], 
                        int arr_size)
   {
        int lo = 0;
        int hi = arr_size - 1;
        int mid = 0, temp = 0;
        while (mid <= hi) 
        {
            switch (a[mid]) 
            {
                case 0: {
                temp = a[lo];
                a[lo] = a[mid];
                a[mid] = temp;
                lo++;
                mid++;
                break;
                }
                case 1:
                mid++;
                break;
                case 2: {
                temp = a[mid];
                a[mid] = a[hi];
                a[hi] = temp;
                hi--;
                break;
                }
            }
        }
    }
 public   static void printArray(int arr[], 
                           int arr_size)
    {
        int i;
        for (i = 0; i < arr_size; i++)
            System.out.print(arr[i] + 
                             " ");
        System.out.println("");
    }
    public static void main(String[] args)
    {
        int arr[] = {0, 1, 1, 0, 1, 2, 
                     1, 2, 0, 0, 0, 1};
        int arr_size = arr.length;
        sort012(arr, arr_size);
        System.out.println(
        "Array after seggregation ");
        printArray(arr, arr_size);
    }
}
---------------------------------------------------------------------------------------------------------------------
4 Find if a given String is Palindrome or not in 2 pointer approach"
public class palindrome{
 public   static boolean isPalindrome(String str)
    {
        int i = 0, j = str.length() - 1;
            if (str.charAt(i) != str.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
 public static void main(String[] args)
    {
        String str = "geeks";
        str = str.toLowerCase();
        if (isPalindrome(str))
            System.out.print("Yes");
        else
            System.out.print("No");
    }
}
---------------------------------------------------------------------------------------------------------------------

April 6 Assignment
1 "1. Merge two sorted Arrays without extra space. 
a[] = {1,3,5,7}
b[] = {2,4,6,8}
import java.util.*;
import java.lang.*;
import java.io.*;
 
public class MergeTwoSorted
{
    public static void mergeArrays(int[] arr1, int[] arr2, int n1,
                                int n2, int[] arr3)
    {
        int i = 0, j = 0, k = 0;
        while (i<n1 && j <n2)
        {
            if (arr1[i] < arr2[j])
                arr3[k++] = arr1[i++];
            else
                arr3[k++] = arr2[j++];
        }
        while (i < n1)
            arr3[k++] = arr1[i++];
        while (j < n2)
            arr3[k++] = arr2[j++];
    }
     
    public static void main (String[] args)
    {
        int[] arr1 = {1, 3, 5, 7};
        int n1 = arr1.length;
     
        int[] arr2 = {2, 4, 6, 8};
        int n2 = arr2.length;
     
        int[] arr3 = new int[n1+n2];
         
        mergeArrays(arr1, arr2, n1, n2, arr3);
     
        System.out.println("Array after merging");
        for (int i=0; i < n1+n2; i++)
            System.out.print(arr3[i] + " ");
    }
}
--------------------------------------------------------------------------------------------------------------------
   2. Find the index of a row containing the maximum number of 1â€™s in a binary matrix

Input:
 
[ 0  0  0  1  1 ]
[ 0  0  1  1  1 ]
[ 0  0  0  0  0 ]
[ 0  1  1  1  1 ]
[ 0  0  0  0  1 ]

import java.util.*;
 
class GFG {
 
static int R = 4 ;
static int C  = 4 ;
 
public static int first(int arr[], int low, int high)
{
    if(high >= low)
    {
        int mid = low + (high - low)/2;
        if ( ( mid == 0 || arr[mid-1] == 0) && arr[mid] == 1)
            return mid;
        else if (arr[mid] == 0)
            return first(arr, (mid + 1), high));
        else
            return first(arr, low, (mid -1));
    }
    return -1;
}
 

public static int rowWithMax1s(int mat[][])
{

    int max_row_index = 0, max = -1;

    int i, index;
    for (i = 0; i < R; i++)
    {
        index = first (mat[i], 0, C-1);
        if (index != -1 && C-index > max)
        {
            max = C - index;
            max_row_index = i;
        }
    }
 
    return max_row_index;
}
    public static void main(String[] args) {
         
    int mat[][] = { {0, 0, 0, 1},
                    {0, 1, 1, 1},
                    {1, 1, 1, 1},
                    {0, 0, 0, 0}};
 
    System.out.print("Index of row with maximum 1s is " + rowWithMax1s(mat));
 
    }
}
---------------------------------------------------------------------------------------------------------------------------
3. Find the transpose of a given matrix. 
Transpose Matrix is formed by changing all the row elements to column elements and vice -versa

Ex-

2 3 4
5 6 4
import java.io.*;
 
public class java
{
     
public static int N = 4;
public static void rotate90Clockwise(int a[][])
{
    for (int i = 0; i < N / 2; i++)
    {
        for (int j = i; j < N - i - 1; j++)
        {
            int temp = a[i][j];
            a[i][j] = a[N - 1 - j][i];
            a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
            a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
            a[j][N - 1 - i] = temp;
        }
    }
}
 public static void printMatrix(int arr[][])
{
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        System.out.print( arr[i][j] + " ");
        System.out.println();
    }
}
public static void main (String[] args)
    {
            int arr[][] = { { 1, 2, 3, 4 },
                      { 5, 6, 7, 8 },
                      { 9, 10, 11, 12 },
                      { 13, 14, 15, 16 } };
    rotate90Clockwise(arr);
    printMatrix(arr);
    }
}
-----------------------------------------------------------------------------------------------------------------
April 7 Assignments;
1  """1. Print the matrix in the spiral form
a[][] =  
{1,2,3,4}
{5,6,7,8},
{9,10,11,12},
{13,14,15,16}
import java.util.*;
 
public class Solution {
 
    public static List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<Integer>();
 
        if (matrix.length == 0)
            return ans;
 
        int R = matrix.length, C = matrix[0].length;
        boolean[][] seen = new boolean[R][C];
        int[] dr = { 0, 1, 0, -1 };
        int[] dc = { 1, 0, -1, 0 };
        int r = 0, c = 0, di = 0;
        for (int i = 0; i < R * C; i++) {
            ans.add(matrix[r]);
            seen[r] = true;
            int cr = r + dr[di];
            int cc = c + dc[di];
 
            if (0 <= cr && cr < R && 0 <= cc && cc < C
                    && !seen[cr][cc]) {
                r = cr;
                c = cc;
            } else {
                di = (di + 1) % 4;
                r += dr[di];
                c += dc[di];
            }
        }
        return ans;
    }
    public static void main(String[] args) {
        a[][] =  
{1,2,3,4}
{5,6,7,8},
{9,10,11,12},
{13,14,15,16}
 
        System.out.println(spiralOrder(a));
    }
}
------------------------------------------------------------------------------------------------------------------------
2 2. Given a boolean matrix mat[M][N] of size M X N, 
modify it such that if a matrix cell mat[i][j] is 1 (or true) then make all the cells of ith row and jth column as 1.
public class matrix
{
    public static void modifyMatrix(int mat[ ][ ], int R, int C)
    {
        int row[ ]= new int [R];
        int col[ ]= new int [C];
        int i, j;
     
        /* Initialize all values of row[] as 0 */
        for (i = 0; i < R; i++)
        {
        row[i] = 0;
        }
        for (i = 0; i < C; i++)
        {
        col[i] = 0;
        }
        for (i = 0; i < R; i++)
        {
            for (j = 0; j < C; j++)
            {
                if (mat[i][j] == 1)
                {
                    row[i] = 1;
                    col[j] = 1;
                }
            }
        }
     
    
        for (i = 0; i < R; i++)
        {
            for (j = 0; j < C; j++)
            {
                if ( row[i] == 1 || col[j] == 1 )
                {
                    mat[i][j] = 1;
                }
            }
        }
    }
    public static void printMatrix(int mat[ ][ ], int R, int C)
    {
        int i, j;
        for (i = 0; i < R; i++)
        {
            for (j = 0; j < C; j++)
            {
                System.out.print(mat[i][j]+ " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args)
    {
        int mat[ ][ ] = { {1, 0, 0, 1},
                          {0, 0, 1, 0},
                          {0, 0, 0, 0},};
                     
                System.out.println("Matrix Initially");
                 
                printMatrix(mat, 3, 4);
             
                modifyMatrix(mat, 3, 4);
                System.out.println("Matrix after modification n");
                printMatrix(mat, 3, 4);
             
    }
 
}
---------------------------------------------------------------------------------------------------------------------------
April 8 Assignments 
1 Print odd numbers till 31 using recursion

import javax.swing.JOptionPane;
public class OddTest{
    public static void odd(int a, int limit){
        if (a <= limit){
            if (a % 2 != 0){
                System.out.println(a);
            }
            odd(++a, limit);
        }
    }

    public static void main(String[] args){
        int n = 0;
        String str = JOptionPane.showInputDialog(null, "make the limits = ");
        n = Integer.parseInt(str);
        odd(0, n);
        JOptionPane.showInputDialog(n);
    }
}
___________________________________________________________________________
2 Find the factorial of a number
class FactorialExample2{  
 static int factorial(int n){    
  if (n == 0)    
    return 1;    
  else    
    return(n * factorial(n-1));    
 }    
 public static void main(String args[]){  
  int i,fact=1;  
  int number=4;//It is the number to calculate factorial    
  fact = factorial(number);   
  System.out.println("Factorial of "+number+" is: "+fact);    
 }  
}  
___________________________________________________________________________
3 Find the nth power of any given number
class Power {
  public static void main(String[] args) {
      
    int base = 3, powerRaised = 4;
    int result = power(base, powerRaised);

    System.out.println(base + "^" + powerRaised + "=" + result);
  }

  public static int power(int base, int powerRaised) {
    if (powerRaised != 0) {

         return (base * power(base, powerRaised - 1));
    }
    else {
      return 1;
    }
  }
}
___________________________________________________________________________4  Print the reverse of a string

public class ReverseStringExample1   
{  
//recursive function to reverse a string      
public String reverseString(String str)  
{  
//checks if the string is empty   
if(str.isEmpty())  
{  
System.out.println("String is empty.")  
//if the above condition is true returns the same string      
return str;  
}   
else   
{  
return reverseString(str.substring(1))+str.charAt(0);  
}  
}  
public static void main(String[] args)   
{  
ReverseStringExample1 rs = new ReverseStringExample1();  
String resultantSting1 = rs.reverseString("JAVATPOINT");  
String resultantSting2 = rs.reverseString("COMPUTER");  
String resultantSting3 = rs.reverseString("INDIA");  
System.out.println(resultantSting1);  
System.out.println(resultantSting2);  
System.out.println(resultantSting3);   
}  
}  
___________________________________________________________________________

April 9 Assignments
1 Write a program to print the fibonacci numbers recursively till n
public class FibonacciExample2{  
 public static int n1=0,n2=1,n3=0;    
 static void printFibonacci(int count){    
    if(count>0){    
         n3 = n1 + n2;    
         n1 = n2;    
         n2 = n3;    
         System.out.print(" "+n3);   
         printFibonacci(count-1);    
     }    
 }    
 public static void main(String args[]){    
  int count=10;    
  System.out.print(n1+" "+n2);
  printFibonacci(count-2);
 }  
}  
___________________________________________________________________________
2 Write a program to find the nth fiboanncii number.

public class Main
{
public static int fib(int n)
    {
        if (n <= 1) {
            return n;
        }
 
        return fib(n - 1) + fib(n - 2);
    }
 
    public static void main(String[] args)
    {
        int n = 8;
 
        System.out.println("F(n) = " + fib(n));
    }
}
___________________________________________________________________________
3 write a recursive function to compute the sum of a array  eg: input: [1,2,5,5,10] => o/p:  23

public class Test {
    public static int arr[] = { 1, 2, 3, 4, 5 };
    static int findSum(int A[], int N)
    {
        if (N <= 0)
            return 0;
        return (findSum(A, N - 1) + A[N - 1]);
    }
    public static void main(String[] args)
    {
        System.out.println(findSum(arr, arr.length));
    }
}
___________________________________________________________________________











    
    
    
    
    
    
    
    
    
    
    
    
    

________________________________________________________________________________________________________________________-----------------------------------------------------------
